*** /home/malabarth/carbon/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java	2014-05-28 11:48:05.561765184 +0200
--- /home/malabarth/carbon.old/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java	2014-05-27 21:52:13.141250342 +0200
***************
*** 23,30 ****
  import static android.net.wifi.WifiManager.WIFI_STATE_UNKNOWN;
  
  /**
!  * TODO:
   * Deprecate WIFI_STATE_UNKNOWN
   */
  import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLED;
  import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLING;
--- 23,35 ----
  import static android.net.wifi.WifiManager.WIFI_STATE_UNKNOWN;
  
  /**
!  * TODO: Add soft AP states as part of WIFI_STATE_XXX
!  * Retain WIFI_STATE_ENABLING that indicates driver is loading
!  * Add WIFI_STATE_AP_ENABLED to indicate soft AP has started
!  * and WIFI_STATE_FAILED for failure
   * Deprecate WIFI_STATE_UNKNOWN
+  *
+  * Doing this will simplify the logic for sending broadcasts
   */
  import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLED;
  import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLING;
***************
*** 100,109 ****
   * Track the state of Wifi connectivity. All event handling is done here,
   * and all changes in connectivity state are initiated here.
   *
!  * Wi-Fi now supports three modes of operation: Client, SoftAp and p2p
!  * In the current implementation, we support concurrent wifi p2p and wifi operation.
!  * The WifiStateMachine handles SoftAp and Client operations while WifiP2pService
!  * handles p2p operation.
   *
   * @hide
   */
--- 105,117 ----
   * Track the state of Wifi connectivity. All event handling is done here,
   * and all changes in connectivity state are initiated here.
   *
!  * Wi-Fi now supports three modes of operation: Client, Soft Ap and Direct
!  * In the current implementation, we do not support any concurrency and thus only
!  * one of Client, Soft Ap or Direct operation is supported at any time.
!  *
!  * The WifiStateMachine supports Soft Ap and Client operations while WifiP2pService
!  * handles Direct. WifiP2pService and WifiStateMachine co-ordinate to ensure only
!  * one exists at a certain time.
   *
   * @hide
   */
***************
*** 112,117 ****
--- 120,129 ----
      private static final String NETWORKTYPE = "WIFI";
      private static final boolean DBG = false;
  
+     /* TODO: This is no more used with the hostapd code. Clean up */
+     private static final String SOFTAP_IFACE = "wl0.1";
+ 
+ 
      private WifiMonitor mWifiMonitor;
      private WifiNative mWifiNative;
      private WifiConfigStore mWifiConfigStore;
***************
*** 2473,2484 ****
          new Thread(new Runnable() {
              public void run() {
                  try {
!                     mNwService.startAccessPoint(config, mInterfaceName);
                  } catch (Exception e) {
                      loge("Exception in softap start " + e);
                      try {
                          mNwService.stopAccessPoint(mInterfaceName);
!                         mNwService.startAccessPoint(config, mInterfaceName);
                      } catch (Exception e1) {
                          loge("Exception in softap re-start " + e1);
                          sendMessage(CMD_START_AP_FAILURE);
--- 2485,2496 ----
          new Thread(new Runnable() {
              public void run() {
                  try {
!                     mNwService.startAccessPoint(config, mInterfaceName, SOFTAP_IFACE);
                  } catch (Exception e) {
                      loge("Exception in softap start " + e);
                      try {
                          mNwService.stopAccessPoint(mInterfaceName);
!                         mNwService.startAccessPoint(config, mInterfaceName, SOFTAP_IFACE);
                      } catch (Exception e1) {
                          loge("Exception in softap re-start " + e1);
                          sendMessage(CMD_START_AP_FAILURE);
